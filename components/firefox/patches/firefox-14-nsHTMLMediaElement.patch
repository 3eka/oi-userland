diff --git a/content/html/content/src/HTMLMediaElement.cpp b/content/html/content/src/HTMLMediaElement.cpp
--- a/content/html/content/src/HTMLMediaElement.cpp
+++ b/content/html/content/src/HTMLMediaElement.cpp
@@ -1869,6 +1869,109 @@
   return nullptr;
 }
 
+class HTMLMediaElement::StreamListener : public MediaStreamListener {
+public:
+  StreamListener(HTMLMediaElement* aElement) :
+    mElement(aElement),
+    mHaveCurrentData(false),
+    mBlocked(false),
+    mMutex("HTMLMediaElement::StreamListener"),
+    mPendingNotifyOutput(false)
+  {}
+  void Forget() { mElement = nullptr; }
+
+  // Main thread
+  void DoNotifyFinished()
+  {
+    if (mElement) {
+      mElement->PlaybackEnded();
+    }
+  }
+  void UpdateReadyStateForData()
+  {
+    if (mElement && mHaveCurrentData) {
+      mElement->UpdateReadyStateForData(
+        mBlocked ? MediaDecoderOwner::NEXT_FRAME_UNAVAILABLE_BUFFERING :
+                   MediaDecoderOwner::NEXT_FRAME_AVAILABLE);
+    }
+  }
+  void DoNotifyBlocked()
+  {
+    mBlocked = true;
+    UpdateReadyStateForData();
+  }
+  void DoNotifyUnblocked()
+  {
+    mBlocked = false;
+    UpdateReadyStateForData();
+  }
+  void DoNotifyOutput()
+  {
+    {
+      MutexAutoLock lock(mMutex);
+      mPendingNotifyOutput = false;
+    }
+    if (mElement && mHaveCurrentData) {
+      mElement->FireTimeUpdate(true);
+    }
+  }
+  void DoNotifyHaveCurrentData()
+  {
+    mHaveCurrentData = true;
+    if (mElement) {
+      mElement->FirstFrameLoaded(false);
+    }
+    UpdateReadyStateForData();
+    DoNotifyOutput();
+  }
+
+  // These notifications run on the media graph thread so we need to
+  // dispatch events to the main thread.
+  virtual void NotifyBlockingChanged(MediaStreamGraph* aGraph, Blocking aBlocked)
+  {
+    nsCOMPtr<nsIRunnable> event;
+    if (aBlocked == BLOCKED) {
+      event = NS_NewRunnableMethod(this, &StreamListener::DoNotifyBlocked);
+    } else {
+      event = NS_NewRunnableMethod(this, &StreamListener::DoNotifyUnblocked);
+    }
+    aGraph->DispatchToMainThreadAfterStreamStateUpdate(event.forget());
+  }
+  virtual void NotifyFinished(MediaStreamGraph* aGraph)
+  {
+    nsCOMPtr<nsIRunnable> event =
+      NS_NewRunnableMethod(this, &StreamListener::DoNotifyFinished);
+    aGraph->DispatchToMainThreadAfterStreamStateUpdate(event.forget());
+  }
+  virtual void NotifyHasCurrentData(MediaStreamGraph* aGraph)
+  {
+    MutexAutoLock lock(mMutex);
+    nsCOMPtr<nsIRunnable> event =
+      NS_NewRunnableMethod(this, &StreamListener::DoNotifyHaveCurrentData);
+    aGraph->DispatchToMainThreadAfterStreamStateUpdate(event.forget());
+  }
+  virtual void NotifyOutput(MediaStreamGraph* aGraph)
+  {
+    MutexAutoLock lock(mMutex);
+    if (mPendingNotifyOutput)
+      return;
+    mPendingNotifyOutput = true;
+    nsCOMPtr<nsIRunnable> event =
+      NS_NewRunnableMethod(this, &StreamListener::DoNotifyOutput);
+    aGraph->DispatchToMainThreadAfterStreamStateUpdate(event.forget());
+  }
+
+private:
+  // These fields may only be accessed on the main thread
+  HTMLMediaElement* mElement;
+  bool mHaveCurrentData;
+  bool mBlocked;
+
+  // mMutex protects the fields below; they can be accessed on any thread
+  Mutex mMutex;
+  bool mPendingNotifyOutput;
+};
+
 HTMLMediaElement::HTMLMediaElement(already_AddRefed<nsINodeInfo> aNodeInfo)
   : nsGenericHTMLElement(aNodeInfo),
     mSrcStreamListener(nullptr),
@@ -2458,109 +2561,6 @@
   return rv;
 }
 
-class HTMLMediaElement::StreamListener : public MediaStreamListener {
-public:
-  StreamListener(HTMLMediaElement* aElement) :
-    mElement(aElement),
-    mHaveCurrentData(false),
-    mBlocked(false),
-    mMutex("HTMLMediaElement::StreamListener"),
-    mPendingNotifyOutput(false)
-  {}
-  void Forget() { mElement = nullptr; }
-
-  // Main thread
-  void DoNotifyFinished()
-  {
-    if (mElement) {
-      mElement->PlaybackEnded();
-    }
-  }
-  void UpdateReadyStateForData()
-  {
-    if (mElement && mHaveCurrentData) {
-      mElement->UpdateReadyStateForData(
-        mBlocked ? MediaDecoderOwner::NEXT_FRAME_UNAVAILABLE_BUFFERING :
-                   MediaDecoderOwner::NEXT_FRAME_AVAILABLE);
-    }
-  }
-  void DoNotifyBlocked()
-  {
-    mBlocked = true;
-    UpdateReadyStateForData();
-  }
-  void DoNotifyUnblocked()
-  {
-    mBlocked = false;
-    UpdateReadyStateForData();
-  }
-  void DoNotifyOutput()
-  {
-    {
-      MutexAutoLock lock(mMutex);
-      mPendingNotifyOutput = false;
-    }
-    if (mElement && mHaveCurrentData) {
-      mElement->FireTimeUpdate(true);
-    }
-  }
-  void DoNotifyHaveCurrentData()
-  {
-    mHaveCurrentData = true;
-    if (mElement) {
-      mElement->FirstFrameLoaded(false);
-    }
-    UpdateReadyStateForData();
-    DoNotifyOutput();
-  }
-
-  // These notifications run on the media graph thread so we need to
-  // dispatch events to the main thread.
-  virtual void NotifyBlockingChanged(MediaStreamGraph* aGraph, Blocking aBlocked)
-  {
-    nsCOMPtr<nsIRunnable> event;
-    if (aBlocked == BLOCKED) {
-      event = NS_NewRunnableMethod(this, &StreamListener::DoNotifyBlocked);
-    } else {
-      event = NS_NewRunnableMethod(this, &StreamListener::DoNotifyUnblocked);
-    }
-    aGraph->DispatchToMainThreadAfterStreamStateUpdate(event.forget());
-  }
-  virtual void NotifyFinished(MediaStreamGraph* aGraph)
-  {
-    nsCOMPtr<nsIRunnable> event =
-      NS_NewRunnableMethod(this, &StreamListener::DoNotifyFinished);
-    aGraph->DispatchToMainThreadAfterStreamStateUpdate(event.forget());
-  }
-  virtual void NotifyHasCurrentData(MediaStreamGraph* aGraph)
-  {
-    MutexAutoLock lock(mMutex);
-    nsCOMPtr<nsIRunnable> event =
-      NS_NewRunnableMethod(this, &StreamListener::DoNotifyHaveCurrentData);
-    aGraph->DispatchToMainThreadAfterStreamStateUpdate(event.forget());
-  }
-  virtual void NotifyOutput(MediaStreamGraph* aGraph)
-  {
-    MutexAutoLock lock(mMutex);
-    if (mPendingNotifyOutput)
-      return;
-    mPendingNotifyOutput = true;
-    nsCOMPtr<nsIRunnable> event =
-      NS_NewRunnableMethod(this, &StreamListener::DoNotifyOutput);
-    aGraph->DispatchToMainThreadAfterStreamStateUpdate(event.forget());
-  }
-
-private:
-  // These fields may only be accessed on the main thread
-  HTMLMediaElement* mElement;
-  bool mHaveCurrentData;
-  bool mBlocked;
-
-  // mMutex protects the fields below; they can be accessed on any thread
-  Mutex mMutex;
-  bool mPendingNotifyOutput;
-};
-
 void HTMLMediaElement::SetupSrcMediaStreamPlayback(DOMMediaStream* aStream)
 {
   NS_ASSERTION(!mSrcStream && !mSrcStreamListener, "Should have been ended already");
