diff -r a207f33adc1a js/src/jsapi.cpp
--- a/js/src/jsapi.cpp	Thu Jan 24 19:13:30 2013 -0800
+++ b/js/src/jsapi.cpp	Fri Jan 25 17:38:51 2013 +0800
@@ -1922,7 +1922,7 @@
 
     /* Check whether we're resolving 'undefined', and define it if so. */
     atom = rt->atomState.undefined;
-    if (idstr == atom) {
+    if (idstr == (JSString*)atom) {
         *resolved = true;
         RootedValue undefinedValue(cx, UndefinedValue());
         return JSObject::defineProperty(cx, obj, atom->asPropertyName(), undefinedValue,
@@ -1935,7 +1935,7 @@
     for (i = 0; standard_class_atoms[i].init; i++) {
         JS_ASSERT(standard_class_atoms[i].clasp);
         atom = OFFSET_TO_NAME(rt, standard_class_atoms[i].atomOffset);
-        if (idstr == atom) {
+        if (idstr == (JSString*)atom) {
             stdnm = &standard_class_atoms[i];
             break;
         }
@@ -1948,7 +1948,7 @@
             atom = StdNameToPropertyName(cx, &standard_class_names[i]);
             if (!atom)
                 return false;
-            if (idstr == atom) {
+            if (idstr == (JSString*)atom) {
                 stdnm = &standard_class_names[i];
                 break;
             }
@@ -1968,7 +1968,7 @@
                 atom = StdNameToPropertyName(cx, &object_prototype_names[i]);
                 if (!atom)
                     return false;
-                if (idstr == atom) {
+                if (idstr == (JSString*)atom) {
                     stdnm = &object_prototype_names[i];
                     break;
                 }
diff --git a/js/src/vm/ScopeObject.cpp b/js/src/vm/ScopeObject.cpp
--- a/js/src/vm/ScopeObject.cpp
+++ b/js/src/vm/ScopeObject.cpp
@@ -811,7 +811,7 @@
                 return false;
 
             /* The empty string indicates an int id. */
-            RootedId id(cx, atom != cx->runtime()->emptyString
+            RootedId id(cx, (JSString*)atom != cx->runtime()->emptyString
                             ? AtomToId(atom)
                             : INT_TO_JSID(i));
 
diff --git a/js/src/frontend/BytecodeEmitter.cpp b/js/src/frontend/BytecodeEmitter.cpp
--- a/js/src/frontend/BytecodeEmitter.cpp
+++ b/js/src/frontend/BytecodeEmitter.cpp
@@ -4586,7 +4586,7 @@
     StmtInfoBCE *stmt = bce->topStmt;
     SrcNoteType noteType;
     if (label) {
-        while (stmt->type != STMT_LABEL || stmt->label != label)
+        while (stmt->type != STMT_LABEL || (JSAtom*)stmt->label != label)
             stmt = stmt->down;
         noteType = SRC_BREAK2LABEL;
     } else {
@@ -4605,7 +4605,7 @@
     if (label) {
         /* Find the loop statement enclosed by the matching label. */
         StmtInfoBCE *loop = NULL;
-        while (stmt->type != STMT_LABEL || stmt->label != label) {
+        while (stmt->type != STMT_LABEL || (JSAtom*)stmt->label != label) {
             if (stmt->isLoop())
                 loop = stmt;
             stmt = stmt->down;
diff --git a/js/src/frontend/Parser.cpp b/js/src/frontend/Parser.cpp
--- a/js/src/frontend/Parser.cpp
+++ b/js/src/frontend/Parser.cpp
@@ -4324,7 +4324,7 @@
                 return null();
             }
             if (stmt->type == STMT_LABEL) {
-                if (stmt->label == label) {
+                if ((JSAtom*)stmt->label == label) {
                     if (!stmt2 || !stmt2->isLoop()) {
                         report(ParseError, false, null(), JSMSG_BAD_CONTINUE);
                         return null();
diff --git a/js/src/frontend/BytecodeCompiler.cpp b/js/src/frontend/BytecodeCompiler.cpp
--- a/js/src/frontend/BytecodeCompiler.cpp
+++ b/js/src/frontend/BytecodeCompiler.cpp
@@ -143,7 +143,7 @@
         return NULL;
 
     // We can specialize a bit for the given scope chain if that scope chain is the global object.
-    JSObject *globalScope = scopeChain && scopeChain == &scopeChain->global() ? (JSObject*) scopeChain : NULL;
+    JSObject *globalScope = scopeChain && (JSObject*)scopeChain == &scopeChain->global() ? (JSObject*) scopeChain : NULL;
     JS_ASSERT_IF(globalScope, globalScope->isNative());
     JS_ASSERT_IF(globalScope, JSCLASS_HAS_GLOBAL_FLAG_AND_SLOTS(globalScope->getClass()));
 
