diff --git a/js/public/Utility.h b/js/public/Utility.h
--- a/js/public/Utility.h
+++ b/js/public/Utility.h
@@ -273,6 +273,85 @@
 
 #endif
 
+#if !defined(js_bitscan_clz32) && defined(__i386)
+inline int js_bitscan_clz32(uint32_t n)
+{
+  int rc;
+  asm("bsrl %ecx, %eax; xor $31, %eax"
+      : "=a" (rc)
+      : "c" (n));
+  return rc;
+}
+inline int js_bitscan_clz64(uint64_t val)
+{
+  uint32_t lo = (uint32_t)val;
+  uint32_t hi = (uint32_t)(val >> 32);
+  return hi != 0 ?
+         js_bitscan_clz32(hi) :
+         32 + js_bitscan_clz32(lo);
+}
+#endif
+#if !defined(js_bitscan_ctz32) && defined(__i386)
+inline int js_bitscan_ctz32(uint32_t n)
+{
+  int rc;
+  asm("bsfl %ecx, %eax;"
+      : "=a" (rc)
+      : "c" (n));
+  return rc;
+}
+inline int js_bitscan_ctz64(uint64_t val)
+{
+  uint32_t lo = (uint32_t)val;
+  uint32_t hi = (uint32_t)(val >> 32);
+  return lo != 0 ?
+         js_bitscan_ctz32(lo) :
+         32 + js_bitscan_ctz32(hi);
+}
+#endif
+#if !defined(js_bitscan_clz32) && defined(__sparc)
+inline int js_bitscan_clz32(uint32_t n)
+{
+  if (!n) return 32;
+  int rc = 0;
+  if (!(n & 0xFFFF0000)) { rc += 16; n = n << 16; }
+  if (!(n & 0xFF000000)) { rc +=  8; n = n <<  8; }
+  if (!(n & 0xF0000000)) { rc +=  4; n = n <<  4; }
+  if (!(n & 0xC0000000)) { rc +=  2; n = n <<  2; }
+  if (!(n & 0x80000000)) { rc ++; }
+  return rc;
+}
+inline int js_bitscan_clz64(uint64_t val)
+{
+  uint32_t lo = (uint32_t)val;
+  uint32_t hi = (uint32_t)(val >> 32);
+  return hi != 0 ?
+         js_bitscan_clz32(hi) :
+         32 + js_bitscan_clz32(lo);
+}
+#endif
+#if !defined(js_bitscan_ctz32) && defined(__sparc)
+inline int js_bitscan_ctz32(uint32_t n)
+{
+  if (!n) return 32;
+  int rc = 0;
+  if (!(n & 0x0000FFFF)) { rc += 16; n = n >> 16; }
+  if (!(n & 0x000000FF)) { rc +=  8; n = n >>  8; }
+  if (!(n & 0x0000000F)) { rc +=  4; n = n >>  4; }
+  if (!(n & 0x00000003)) { rc +=  2; n = n >>  2; }
+  if (!(n & 0x00000001)) { rc ++; }
+  return rc;
+}
+inline int js_bitscan_ctz64(uint64_t val)
+{
+  uint32_t lo = (uint32_t)val;
+  uint32_t hi = (uint32_t)(val >> 32);
+  return lo != 0 ?
+         js_bitscan_ctz32(lo) :
+         32 + js_bitscan_ctz32(hi);
+}
+#endif
+
 /*
 ** Macro version of JS_CeilingLog2: Compute the log of the least power of
 ** 2 greater than or equal to _n. The result is returned in _log2.
