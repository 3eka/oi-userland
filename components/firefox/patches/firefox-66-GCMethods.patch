diff --git a/content/xbl/src/nsXBLMaybeCompiled.h b/content/xbl/src/nsXBLMaybeCompiled.h
--- a/content/xbl/src/nsXBLMaybeCompiled.h
+++ b/content/xbl/src/nsXBLMaybeCompiled.h
@@ -74,29 +74,27 @@
 template <class UncompiledT>
 struct GCMethods<nsXBLMaybeCompiled<UncompiledT> > : public GCMethods<JSObject *>
 {
-  typedef struct GCMethods<JSObject *> Base;
-
   static nsXBLMaybeCompiled<UncompiledT> initial() { return nsXBLMaybeCompiled<UncompiledT>(); }
 
   static bool poisoned(nsXBLMaybeCompiled<UncompiledT> function)
   {
-    return function.IsCompiled() && Base::poisoned(function.GetJSFunction());
+    return function.IsCompiled() && GCMethods<JSObject *>::poisoned(function.GetJSFunction());
   }
 
   static bool needsPostBarrier(nsXBLMaybeCompiled<UncompiledT> function)
   {
-    return function.IsCompiled() && Base::needsPostBarrier(function.GetJSFunction());
+    return function.IsCompiled() && GCMethods<JSObject *>::needsPostBarrier(function.GetJSFunction());
   }
 
 #ifdef JSGC_GENERATIONAL
   static void postBarrier(nsXBLMaybeCompiled<UncompiledT>* functionp)
   {
-    Base::postBarrier(&functionp->UnsafeGetJSFunction());
+    GCMethods<JSObject *>::postBarrier(&functionp->UnsafeGetJSFunction());
   }
 
   static void relocate(nsXBLMaybeCompiled<UncompiledT>* functionp)
   {
-    Base::relocate(&functionp->UnsafeGetJSFunction());
+    GCMethods<JSObject *>::relocate(&functionp->UnsafeGetJSFunction());
   }
 #endif
 };
diff --git a/js/public/RootingAPI.h b/js/public/RootingAPI.h
--- a/js/public/RootingAPI.h
+++ b/js/public/RootingAPI.h
@@ -509,6 +509,22 @@
 #endif
 };
 
+template <> struct GCMethods<JSObject *>
+{
+    static JSObject *initial() { return NULL; }
+    static ThingRootKind kind() { return RootKind<JSObject *>::rootKind(); }
+    static bool poisoned(JSObject *v) { return JS::IsPoisonedPtr(v); }
+    static bool needsPostBarrier(JSObject *v) { return v; }
+#ifdef JSGC_GENERATIONAL
+    static void postBarrier(JSObject **vp) {
+        JS::HeapCellPostBarrier(reinterpret_cast<js::gc::Cell **>(vp));
+    }
+    static void relocate(JSObject **vp) {
+        JS::HeapCellRelocate(reinterpret_cast<js::gc::Cell **>(vp));
+    }
+#endif
+};
+
 #if defined(DEBUG) && defined(JS_THREADSAFE)
 /* This helper allows us to assert that Rooted<T> is scoped within a request. */
 extern JS_PUBLIC_API(bool)
