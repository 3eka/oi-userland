diff --git a/js/src/builtin/MapObject.h b/js/src/builtin/MapObject.h
--- a/js/src/builtin/MapObject.h
+++ b/js/src/builtin/MapObject.h
@@ -98,19 +98,20 @@
     static void finalize(FreeOp *fop, JSObject *obj);
     static JSBool construct(JSContext *cx, unsigned argc, Value *vp);
 
+  public:
     static bool is(const Value &v);
-
+    static bool size_impl(JSContext *cx, CallArgs args);
+    static bool get_impl(JSContext *cx, CallArgs args);
+    static bool has_impl(JSContext *cx, CallArgs args);
+    static bool set_impl(JSContext *cx, CallArgs args);
+    static bool delete_impl(JSContext *cx, CallArgs args);
     static bool iterator_impl(JSContext *cx, CallArgs args, IteratorKind kind);
 
-    static bool size_impl(JSContext *cx, CallArgs args);
+  private:
     static JSBool size(JSContext *cx, unsigned argc, Value *vp);
-    static bool get_impl(JSContext *cx, CallArgs args);
     static JSBool get(JSContext *cx, unsigned argc, Value *vp);
-    static bool has_impl(JSContext *cx, CallArgs args);
     static JSBool has(JSContext *cx, unsigned argc, Value *vp);
-    static bool set_impl(JSContext *cx, CallArgs args);
     static JSBool set(JSContext *cx, unsigned argc, Value *vp);
-    static bool delete_impl(JSContext *cx, CallArgs args);
     static JSBool delete_(JSContext *cx, unsigned argc, Value *vp);
     static bool keys_impl(JSContext *cx, CallArgs args);
     static JSBool keys(JSContext *cx, unsigned argc, Value *vp);
@@ -136,17 +137,20 @@
     static void finalize(FreeOp *fop, JSObject *obj);
     static JSBool construct(JSContext *cx, unsigned argc, Value *vp);
 
+  public:
     static bool is(const Value &v);
 
     static bool iterator_impl(JSContext *cx, CallArgs args, IteratorKind kind);
 
     static bool size_impl(JSContext *cx, CallArgs args);
+    static bool has_impl(JSContext *cx, CallArgs args);
+    static bool add_impl(JSContext *cx, CallArgs args);
+    static bool delete_impl(JSContext *cx, CallArgs args);
+
+  private:
     static JSBool size(JSContext *cx, unsigned argc, Value *vp);
-    static bool has_impl(JSContext *cx, CallArgs args);
     static JSBool has(JSContext *cx, unsigned argc, Value *vp);
-    static bool add_impl(JSContext *cx, CallArgs args);
     static JSBool add(JSContext *cx, unsigned argc, Value *vp);
-    static bool delete_impl(JSContext *cx, CallArgs args);
     static JSBool delete_(JSContext *cx, unsigned argc, Value *vp);
     static bool values_impl(JSContext *cx, CallArgs args);
     static JSBool values(JSContext *cx, unsigned argc, Value *vp);
diff --git a/js/src/jstypedarray.h b/js/src/jstypedarray.h
--- a/js/src/jstypedarray.h	2014-07-06 12:54:00.627421280 +0400
+++ b/js/src/jstypedarray.h	2014-07-06 13:03:23.309809396 +0400
@@ -30,10 +30,10 @@
  */
 class ArrayBufferObject : public JSObject
 {
+  public:
     static bool byteLengthGetterImpl(JSContext *cx, CallArgs args);
     static bool fun_slice_impl(JSContext *cx, CallArgs args);
 
-  public:
     static Class class_;
 
     static Class protoClass;
@@ -387,16 +387,20 @@
 private:
     static Class protoClass;
 
+public:
     static inline bool is(const Value &v);
 
+private:
     template <typename NativeType>
     static uint8_t *
     getDataPointer(JSContext *cx, Handle<DataViewObject*> obj, uint32_t offset);
 
+public:
     template<Value ValueGetter(DataViewObject &view)>
     static bool
     getterImpl(JSContext *cx, CallArgs args);
 
+private:
     template<Value ValueGetter(DataViewObject &view)>
     static JSBool
     getter(JSContext *cx, unsigned argc, Value *vp);
