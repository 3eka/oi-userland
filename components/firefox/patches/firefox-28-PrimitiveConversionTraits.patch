diff --git a/dom/bindings/PrimitiveConversions.h b/dom/bindings/PrimitiveConversions.h
--- a/dom/bindings/PrimitiveConversions.h
+++ b/dom/bindings/PrimitiveConversions.h
@@ -244,6 +244,10 @@
   public PrimitiveConversionTraits_ToCheckedIntHelper<T, PrimitiveConversionTraits_EnforceRange<T> > {
 };
 
+template<> struct PrimitiveConversionTraits<uint64_t, eEnforceRange> :
+  public PrimitiveConversionTraits_ToCheckedIntHelper<uint64_t, PrimitiveConversionTraits_EnforceRange<uint64_t> > {
+};
+
 template<typename T>
 inline bool
 PrimitiveConversionTraits_Clamp(JSContext* cx, const double& d, T* retval)
@@ -290,6 +294,52 @@
   return true;
 }
 
+template<>
+bool
+PrimitiveConversionTraits_Clamp(JSContext* cx, const double& d, uint16_t* retval)
+{
+  MOZ_STATIC_ASSERT(std::numeric_limits<uint16_t>::is_integer,
+                    "This can only be applied to integers!");
+
+  if (mozilla::IsNaN(d)) {
+    *retval = 0;
+    return true;
+  }
+  if (d >= PrimitiveConversionTraits_Limits<uint16_t>::max()) {
+    *retval = PrimitiveConversionTraits_Limits<uint16_t>::max();
+    return true;
+  }
+  if (d <= PrimitiveConversionTraits_Limits<uint16_t>::min()) {
+    *retval = PrimitiveConversionTraits_Limits<uint16_t>::min();
+    return true;
+  }
+
+  MOZ_ASSERT(mozilla::IsFinite(d));
+
+  // Banker's rounding (round ties towards even).
+  // We move away from 0 by 0.5f and then truncate.  That gets us the right
+  // answer for any starting value except plus or minus N.5.  With a starting
+  // value of that form, we now have plus or minus N+1.  If N is odd, this is
+  // the correct result.  If N is even, plus or minus N is the correct result.
+  double toTruncate = (d < 0) ? d - 0.5 : d + 0.5;
+
+  uint16_t truncated = static_cast<uint16_t>(toTruncate);
+
+  if (truncated == toTruncate) {
+    /*
+     * It was a tie (since moving away from 0 by 0.5 gave us the exact integer
+     * we want). Since we rounded away from 0, we either already have an even
+     * number or we have an odd number but the number we want is one closer to
+     * 0. So just unconditionally masking out the ones bit should do the trick
+     * to get us the value we want.
+     */
+    truncated &= ~1;
+  }
+
+  *retval = truncated;
+  return true;
+}
+
 template<typename T>
 struct PrimitiveConversionTraits<T, eClamp> :
   public PrimitiveConversionTraits_ToCheckedIntHelper<T, PrimitiveConversionTraits_Clamp<T> > {
